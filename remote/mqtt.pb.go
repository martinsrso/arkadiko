// Code generated by protoc-gen-go.
// source: remote/mqtt.proto
// DO NOT EDIT!

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	remote/mqtt.proto

It has these top-level messages:
	Message
	SendMessageResult
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Message represents a message being sent to MQTT
type Message struct {
	Topic    string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Payload  string `protobuf:"bytes,2,opt,name=payload" json:"payload,omitempty"`
	Retained bool   `protobuf:"varint,3,opt,name=retained" json:"retained,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Message) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *Message) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

// MessageResult represents the result of a message being sent
type SendMessageResult struct {
	Topic    string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Retained bool   `protobuf:"varint,2,opt,name=retained" json:"retained,omitempty"`
}

func (m *SendMessageResult) Reset()                    { *m = SendMessageResult{} }
func (m *SendMessageResult) String() string            { return proto.CompactTextString(m) }
func (*SendMessageResult) ProtoMessage()               {}
func (*SendMessageResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SendMessageResult) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *SendMessageResult) GetRetained() bool {
	if m != nil {
		return m.Retained
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "remote.Message")
	proto.RegisterType((*SendMessageResult)(nil), "remote.SendMessageResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MQTT service

type MQTTClient interface {
	// Sends the specified message to the specified topic.
	//
	// returns true if the message has been sent.
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SendMessageResult, error)
}

type mQTTClient struct {
	cc *grpc.ClientConn
}

func NewMQTTClient(cc *grpc.ClientConn) MQTTClient {
	return &mQTTClient{cc}
}

func (c *mQTTClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*SendMessageResult, error) {
	out := new(SendMessageResult)
	err := grpc.Invoke(ctx, "/remote.MQTT/SendMessage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MQTT service

type MQTTServer interface {
	// Sends the specified message to the specified topic.
	//
	// returns true if the message has been sent.
	SendMessage(context.Context, *Message) (*SendMessageResult, error)
}

func RegisterMQTTServer(s *grpc.Server, srv MQTTServer) {
	s.RegisterService(&_MQTT_serviceDesc, srv)
}

func _MQTT_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MQTTServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.MQTT/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MQTTServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _MQTT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.MQTT",
	HandlerType: (*MQTTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _MQTT_SendMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "remote/mqtt.proto",
}

func init() { proto.RegisterFile("remote/mqtt.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 173 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x4a, 0xcd, 0xcd,
	0x2f, 0x49, 0xd5, 0xcf, 0x2d, 0x2c, 0x29, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83,
	0x08, 0x29, 0x85, 0x72, 0xb1, 0xfb, 0xa6, 0x16, 0x17, 0x27, 0xa6, 0xa7, 0x0a, 0x89, 0x70, 0xb1,
	0x96, 0xe4, 0x17, 0x64, 0x26, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41, 0x38, 0x42, 0x12,
	0x5c, 0xec, 0x05, 0x89, 0x95, 0x39, 0xf9, 0x89, 0x29, 0x12, 0x4c, 0x60, 0x71, 0x18, 0x57, 0x48,
	0x8a, 0x8b, 0xa3, 0x28, 0xb5, 0x24, 0x31, 0x33, 0x2f, 0x35, 0x45, 0x82, 0x59, 0x81, 0x51, 0x83,
	0x23, 0x08, 0xce, 0x57, 0x72, 0xe5, 0x12, 0x0c, 0x4e, 0xcd, 0x4b, 0x81, 0x1a, 0x1d, 0x94, 0x5a,
	0x5c, 0x9a, 0x53, 0x82, 0xc3, 0x02, 0x64, 0x63, 0x98, 0x50, 0x8d, 0x31, 0x72, 0xe6, 0x62, 0xf1,
	0x0d, 0x0c, 0x09, 0x11, 0xb2, 0xe6, 0xe2, 0x46, 0x32, 0x4e, 0x88, 0x5f, 0x0f, 0xe2, 0x7a, 0x3d,
	0xa8, 0x80, 0x94, 0x24, 0x4c, 0x00, 0xc3, 0x52, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x8f, 0x8d, 0x01,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0xd2, 0xae, 0xae, 0x06, 0x01, 0x00, 0x00,
}
